import { proto, generateWAMessageFromContent } from '@whiskeysockets/baileys'
import { BaseCommand, Command, Message } from '../../Structures'
import { IArgs } from '../../Types'

@Command('help', {
    description: "Displays the bot's usable commands",
    aliases: ['menu'],
    cooldown: 10,
    exp: 20,
    usage: 'help || help <command_name>',
    category: 'core'
})
export default class extends BaseCommand {
    public override execute = async (M: Message, { context }: IArgs): Promise<void> => {
        if (!context) {
            let commands = Array.from(this.handler.commands, ([command, data]) => ({
                command,
                data
            })).filter((command) => command.data.config.category !== 'dev')
            const { nsfw } = await this.client.DB.getGroup(M.from)
            if (!nsfw) commands = commands.filter(({ data }) => data.config.category !== 'nsfw')
            let text = `\n*╭─「 You Are Yaoi ヾ(❀╹◡╹)ﾉﾞ❀~ 」*
*│ ɴᴀᴍᴇ:* ${this.client.config.name}
*│ ᴜsᴇʀ: @${M.sender.jid.split('@')[0]}*
*│ ᴘʀᴇғɪx:* "${this.client.config.prefix}"
*│ ᴏᴡɴᴇʀ:* *ᴹᴿ᭄ ᴋᴀᴋᴀsʜɪོ ×፝֟͜×*
*╰────────────┈平和* \n\n*📬 Command List 📬*`
            const sections = []
            const categories: string[] = []
            for (const command of commands) {
                if (categories.includes(command.data.config.category)) continue
                categories.push(command.data.config.category)
            }
            for (const category of categories) {
                const rows: IRows[] = []
                const categoryCommands: string[] = []
                const filteredCommands = commands.filter((command) => command.data.config.category === category)
                text += `\n\n━━━━❰ *${this.client.utils.capitalize(category)} ❱━━━━*\n\n`
                filteredCommands.forEach((command) => {
                    categoryCommands.push(command.data.name)
                    rows.push({
                        title: this.client.utils.capitalize(command.data.name),
                        id: `${this.client.config.prefix}help ${command.data.name}`
                    })
                })
                text += `*_${categoryCommands.join(', ')}_*`
                sections.push({ title: this.client.utils.capitalize(category), rows })
            }
            text += `\n\n📕 *Note:*\n*➪ Use ${this.client.config.prefix}help <command name> from help the list to see its description and usage*\n *➪ Eg: ${this.client.config.prefix}help profile*\n *➪ <> means required and [ ] means optional, don't include <> or [ ] when using command.*`
            const interactiveMessage = {
                body: { text },
                footer: { text: '' },
                nativeFlowMessage: {
                    buttons: [{
                        name: 'single_select',
                        buttonParamsJson: JSON.stringify({ title: 'Command List', sections })
                    }],
                    messageParamsJson: ''
                }
            }
            const { message } = generateWAMessageFromContent(M.from, {
                viewOnceMessage: { message: { interactiveMessage } }
            }, { userJid: M.sender.jid })
            return void this.client.relayMessage(M.from, message as proto.IMessage, {})
        } else {
            const cmd = context.trim().toLowerCase()
            const command = this.handler.commands.get(cmd) || this.handler.aliases.get(cmd)
            if (!command) return void M.reply(`No command found | *"${context.trim()}"*`)
            return void M.reply(
                `🎐 *Command:* ${this.client.utils.capitalize(command.name)}\n🎴 *Aliases:* ${
                    !command.config.aliases
                        ? ''
                        : command.config.aliases.map((alias) => this.client.utils.capitalize(alias)).join(', ')
                }\n🔗 *Category:* ${this.client.utils.capitalize(command.config.category)}\n⏰ *Cooldown:* ${
                    command.config.cooldown ?? 3
                }s\n🎗 *Usage:* ${command.config.usage
                    .split('||')
                    .map((usage) => `${this.client.config.prefix}${usage.trim()}`)
                    .join(' | ')}\n🧧 *Description:* ${command.config.description}`
            )
        }
    }        
}

interface IRows {
    title: string
    id: string
    description?: string
}
